"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const csv_parser_1 = __importDefault(require("csv-parser"));
const mongodb_1 = require("mongodb");
const dotenv_1 = __importDefault(require("dotenv"));
// ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .env
dotenv_1.default.config();
console.log("üîπ MONGO_URL:", process.env.MONGO_URL); // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ MONGO_URL ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏´‡∏°
const uri = process.env.MONGO_URL;
if (!uri) {
    throw new Error("‚ùå MONGO_URL is not defined. Please check your .env file.");
}
const dbName = 'cardDB';
const collections = {
    zodiac: 'zodiac_cards',
    tarot: 'tarot_cards'
};
// ‡∏™‡∏£‡πâ‡∏≤‡∏á MongoDB Client
const client = new mongodb_1.MongoClient(uri);
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSV ‡πÄ‡∏Ç‡πâ‡∏≤ MongoDB
async function importCSV(fileName, collectionName) {
    try {
        await client.connect();
        console.log(`‚úÖ Connected to MongoDB: ${collectionName}`);
        const db = client.db(dbName);
        const collection = db.collection(collectionName);
        // üõë ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        await collection.deleteMany({});
        console.log(`üóëÔ∏è Cleared old data in ${collectionName}`);
        const filePath = path_1.default.join(__dirname, fileName);
        const cards = [];
        // ‡∏≠‡πà‡∏≤‡∏ô CSV ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ Header ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
        fs_1.default.createReadStream(filePath, { encoding: 'utf-8' })
            .pipe((0, csv_parser_1.default)({ headers: ['cardID', 'cardNAME', 'cardMEANING', 'cardPHOTO'], skipLines: 1 })) // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ Header
            .on('data', (row) => {
            // ‚úÖ ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
            Object.keys(row).forEach((key) => {
                if (row[key])
                    row[key] = row[key].trim();
            });
            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ field ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
            if (!row.cardID || !row.cardNAME || !row.cardMEANING || !row.cardPHOTO) {
                console.log(`‚ö†Ô∏è Skipping row (Missing required fields):`, row);
                return;
            }
            // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `cardID` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            const parsedCardID = parseInt(row.cardID, 10);
            if (isNaN(parsedCardID)) {
                console.log(`‚ùå Invalid cardID (NaN):`, row.cardID);
                return;
            }
            // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö `\n` ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô `cardMEANING` ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç `""` ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
            const cleanedMeaning = row.cardMEANING
                .replace(/\\n/g, '\n') // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
                .replace(/""/g, '"'); // ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ "" ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏ô CSV
            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô MongoDB
            cards.push({
                cardID: parsedCardID,
                cardNAME: row.cardNAME,
                cardMEANING: cleanedMeaning, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
                cardPHOTO: row.cardPHOTO
            });
        })
            .on('end', async () => {
            if (cards.length > 0) {
                await collection.insertMany(cards);
                console.log(`‚úÖ Imported ${cards.length} records into ${collectionName}`);
            }
            else {
                console.log(`‚ö†Ô∏è No valid data found in ${fileName}`);
            }
            if (collectionName === collections.tarot)
                client.close();
        });
    }
    catch (err) {
        console.error(`‚ùå Error importing ${fileName}:`, err);
        client.close();
    }
}
// **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
importCSV('zodiac.csv', collections.zodiac);
importCSV('tarot.csv', collections.tarot);
//# sourceMappingURL=import.js.map