import express from "express";
import { Account } from "../models/login";
import bcrypt from "bcrypt";
import admin from "../database/firebaseAdmin"; // ‚úÖ ‡πÉ‡∏ä‡πâ Firebase Admin SDK
import { Request, Response } from "express";  // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á import ‡∏à‡∏≤‡∏Å express
import jwt, { SignOptions } from "jsonwebtoken";
import config from "../config/auth_config";

export const showUsers = async (req: express.Request, res: express.Response) => {
    try {
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ username ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const users = await Account.find({}, "username");

        return res.send({
            status: "success",
            users: users.map(user => user.username) // ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
        });

    } catch (error) {
        console.log(error);
        return res.sendStatus(400);
    }
};

interface LoginRequestBody {
    name: string;
    password: string;
}

interface LoginResponseBody {
    status: string;
    message: string;
    token?: string;
    user?: {
        id: string;
        username: string;
        email?: string;
    };
}

export const login = async (req: Request<{}, {}, LoginRequestBody>, res: Response<LoginResponseBody>) => {
    try {
        const { name, password } = req.body;

        if (!name || !password) {
            return res.status(400).json({ status: "error", message: "Username and password are required" });
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const user = await Account.findOne({ username: name });
        if (!user) {
            return res.status(400).json({ status: "error", message: "User not found" });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(400).json({ status: "error", message: "Incorrect password" });
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ JWT_SECRET ‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô string
        if (!config.JWT_SECRET || typeof config.JWT_SECRET !== "string") {
            throw new Error("JWT_SECRET is not set or is invalid");
        }

        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î expiresIn ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà jwt.sign ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
        let expiresIn: SignOptions["expiresIn"];
        if (typeof config.TOKEN_EXPIRATION === "number") {
            expiresIn = config.TOKEN_EXPIRATION;
        } else if (typeof config.TOKEN_EXPIRATION === "string") {
            expiresIn = parseInt(config.TOKEN_EXPIRATION, 10);
            if (isNaN(expiresIn)) {
                expiresIn = "1h"; // ‡∏´‡∏≤‡∏Å parsing ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
            }
        } else {
            expiresIn = "1h"; // ‡∏Ñ‡πà‡∏≤ default
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const token: string = jwt.sign(
            { userId: user._id.toString(), username: user.username },
            config.JWT_SECRET, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            { expiresIn } // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        );

        return res.status(200).json({
            status: "success",
            message: "Login successful",
            token,
            user: {
                id: user._id.toString(),
                username: user.username,
                email: user.email, // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÑ‡∏õ‡πÉ‡∏´‡πâ frontend
            },
        });
    } catch (error) {
        console.error("Login error:", error);
        return res.status(500).json({ status: "error", message: "Internal server error" });
    }
};

export const register = async (req: express.Request, res: express.Response) => {
    try {
        let { username, firstname, lastname, email, password, confirmpassword, birthday } = req.body;

        // ‚úÖ Validate required fields
        if (!username || !email || !password || !confirmpassword) {
            return res.status(400).json({ status: "error", message: "Username, Email, Password, and Confirm Password are required" });
        }

        // ‚úÖ Validate password length
        if (password.length < 6) {
            return res.status(400).json({ status: "error", message: "Password must be at least 6 characters long" });
        }

        // ‚úÖ Ensure passwords match
        if (password !== confirmpassword) {
            return res.status(400).json({ status: "error", message: "Passwords do not match" });
        }

        // ‚úÖ Convert email to lowercase and trim spaces
        email = email.toLowerCase().trim();

        // ‚úÖ Check if the user already exists
        const existingUser = await Account.findOne({
            $or: [{ username }, { email }]
        });

        if (existingUser) {
            return res.status(400).json({
                status: "error",
                message: "Username or Email already exists"
            });
        }

        // ‚úÖ Hash password
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // ‚úÖ Set default birthday if not provided
        if (!birthday) {
            birthday = "2000-01-01"; // Set a more realistic default
        }

        // ‚úÖ Create new user
        const newUser = new Account({
            username,
            firstname: firstname?.trim() || "",
            lastname: lastname?.trim() || "",
            email,
            password: hashedPassword,
            birthday,
        });

        await newUser.save();

        return res.status(201).json({
            status: "success",
            message: "User registered successfully",
            user: {
                _id: newUser._id,  // Include user ID for frontend usage
                username: newUser.username,
                email: newUser.email
            }
        });

    } catch (error) {
        console.error("Error in register:", error);
        return res.status(500).json({ status: "error", message: "Internal Server Error" });
    }
};
export const deleteAccount = async (req: express.Request, res: express.Response) => {
    try {
        const { userId } = req.body;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ `userId` ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤
        if (!userId) {
            return res.status(400).json({ status: "error", message: "User ID is required" });
        }

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const user = await Account.findById(userId);
        if (!user) {
            return res.status(404).json({ status: "error", message: "User not found" });
        }

        // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        await Account.findByIdAndDelete(userId);

        return res.status(200).json({
            status: "success",
            message: "Account deleted successfully"
        });

    } catch (error) {
        console.error("Error deleting account:", error);
        return res.status(500).json({ status: "error", message: "Internal Server Error" });
    }
};

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Login + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
export const googleLogin = async (req: Request, res: Response) => {
    try {
        const { token } = req.body;
        if (!token) return res.status(400).json({ message: "Token is required" });

        // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token ‡∏ú‡πà‡∏≤‡∏ô Firebase Admin SDK
        const decodedToken = await admin.auth().verifyIdToken(token);
        console.log("‚úÖ Decoded Token:", decodedToken);

        // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        let user = await Account.findOne({ uid: decodedToken.uid });

        if (!user) {
            // üîπ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà
            user = await Account.create({
                uid: decodedToken.uid,
                email: decodedToken.email,
                name: decodedToken.name || "",
                photo: decodedToken.picture || "",
                createdAt: new Date(),
            });
            console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á MongoDB:", user);
        } else {
            console.log("üîÑ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà");
        }

        return res.status(200).json({
            message: "Login Successful",
            user: {
                email: user.email,
                username: user.username,
                birthday: user.birthday
            },
        });
    } catch (error) {
        console.error("‚ùå Authentication Failed:", error.message);
        return res.status(500).json({ message: "Authentication Failed", error: error.message });
    }
};

export const updateProfile = async (req: express.Request, res: express.Response) => {
    try {
        const { userId, username, firstname, lastname, birthday } = req.body;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ `userId` ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        if (!userId) {
            return res.status(400).json({ status: "error", message: "User ID is required" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const user = await Account.findById(userId);
        if (!user) {
            return res.status(404).json({ status: "error", message: "User not found" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `username` ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (username && username !== user.username) {
            const existingUser = await Account.findOne({ username });
            if (existingUser) {
                return res.status(400).json({ status: "error", message: "Username already taken" });
            }
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        user.username = username || user.username;
        user.firstname = firstname || user.firstname;
        user.lastname = lastname || user.lastname;
        user.birthday = birthday || user.birthday;

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MongoDB
        await user.save();

        return res.status(200).json({
            status: "success",
            message: "Profile updated successfully",
            user: {
                username: user.username,
                firstname: user.firstname,
                lastname: user.lastname,
                birthday: user.birthday
            }
        });

    } catch (error) {
        console.error("Error updating profile:", error);
        return res.status(500).json({ status: "error", message: "Internal Server Error" });
    }
};
export const resetPassword = async (req: express.Request, res: express.Response) => {
    try {
        const { userId, password, confirmPassword } = req.body;

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
        if (!userId || !password || !confirmPassword) {
            return res.status(400).json({ status: "error", message: "User ID, New Password, and Confirm Password are required" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
        if (password !== confirmPassword) {
            return res.status(400).json({ status: "error", message: "Passwords do not match" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        const user = await Account.findById(userId);
        if (!user) {
            return res.status(404).json({ status: "error", message: "User not found" });
        }

        // ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á MongoDB
        user.password = hashedPassword;
        await user.save();

        return res.status(200).json({
            status: "success",
            message: "Password reset successfully"
        });

    } catch (error) {
        console.error("Error resetting password:", error);
        return res.status(500).json({ status: "error", message: "Internal Server Error" });
    }
};
