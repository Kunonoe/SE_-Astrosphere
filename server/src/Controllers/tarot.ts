import { Request, Response } from "express";
import { Tarot } from "../models/tarocard";
import { UserHistory } from "../models/userHistory";
import connectDB from "../database/database"

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà‡∏ó‡∏≤‡πÇ‡∏£‡∏ï‡πå 3 ‡πÉ‡∏ö
export const drawTarot = async (req: Request, res: Response) => {
    try {
        const { userID } = req.body;
        if (!userID) {
            return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userID" });
        }
        // ‡∏î‡∏∂‡∏á‡πÑ‡∏û‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å MongoDB
        await connectDB();
        const allTarotCards = await Tarot.find().lean();
        
        if (allTarotCards.length < 3) {
            return res.status(400).json({ error: "‡πÑ‡∏û‡πà‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°" });
        }

        // **‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà 3 ‡πÉ‡∏ö ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô**
        const shuffled = allTarotCards.sort(() => 0.5 - Math.random());
        // ‚úÖ ‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà 1 ‡πÉ‡∏ö (‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏®‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á 1 ‡∏Ñ‡πà‡∏≤)
        const selectedCards = shuffled.slice(0, 3);

        // console.log("‚úÖ ‡πÑ‡∏û‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ:", selectedCards);
        // // üîπ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á `user_history`
        const historyEntry = await UserHistory.create({
            userID,
            type: "tarot",
            tarotName1: selectedCards[0].cardNAME,
            tarotPrediction1: selectedCards[0].cardMEANING,
            tarotImage1: selectedCards[0].cardPHOTO,
            tarotName2: selectedCards[1].cardNAME,
            tarotPrediction2: selectedCards[1].cardMEANING,
            tarotImage2: selectedCards[1].cardPHOTO,
            tarotName3: selectedCards[2].cardNAME,
            tarotPrediction3: selectedCards[2].cardMEANING,
            tarotImage3: selectedCards[2].cardPHOTO
        });

        return res.json({
            message: "‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß",
            userID,
            tarotCards: [
                {
                    tarotName: selectedCards[0].cardNAME,
                    tarotPrediction: selectedCards[0].cardMEANING,
                    tarotImage: selectedCards[0].cardPHOTO
                },
                {
                    tarotName: selectedCards[1].cardNAME,
                    tarotPrediction: selectedCards[1].cardMEANING,
                    tarotImage: selectedCards[1].cardPHOTO
                },
                {
                    tarotName: selectedCards[2].cardNAME,
                    tarotPrediction: selectedCards[2].cardMEANING,
                    tarotImage: selectedCards[2].cardPHOTO
                }
            ],
            historyID: historyEntry._id
        });
    } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏û‡πà", error.message);
        return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};

export const ListTarot = async (req: Request, res: Response): Promise<Response> => {
    try {
        await connectDB();
        const cards = await Tarot.find({}).lean();
        return res.json({ cards });
    } catch (error) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏û‡πà:", (error as Error).message);
        return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};

export const getTarotByID = async (req: Request, res: Response): Promise<Response> => {
    try {
        await connectDB();
        const card = await Tarot.findOne({ cardID: Number(req.params.id) }).lean();
        console.log(card);
        
        if (!card) {
            return res.status(404).json({ error: "Card not found" });
        }

        return res.json(card);
    } catch (error) {
        console.error("‚ùå Error fetching tarot card:", error);
        return res.status(500).json({ error: "Server error" });
    }
};
