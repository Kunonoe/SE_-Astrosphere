const express = require('express');
const router = express.Router();
import { Request, Response } from 'express';

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤‡∏£‡∏≤‡∏®‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î (‡πÅ‡∏ö‡πà‡∏á‡∏ä‡πà‡∏ß‡∏á 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
const zodiacTable: Record<string, string[]> = {
    "15 ‡∏°.‡∏Ñ. - 12 ‡∏Å.‡∏û.": ["‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π"],
    "13 ‡∏Å.‡∏û. - 13 ‡∏°‡∏µ.‡∏Ñ.": ["‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£"],
    "14 ‡∏°‡∏µ.‡∏Ñ. - 12 ‡πÄ‡∏°.‡∏¢.": ["‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå"],
    "13 ‡πÄ‡∏°.‡∏¢. - 13 ‡∏û.‡∏Ñ.": ["‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô"],
    "14 ‡∏û.‡∏Ñ. - 14 ‡∏°‡∏¥.‡∏¢.": ["‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©"],
    "15 ‡∏°‡∏¥.‡∏¢. - 16 ‡∏Å.‡∏Ñ.": ["‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†"],
    "17 ‡∏Å.‡∏Ñ. - 16 ‡∏™.‡∏Ñ.": ["‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô"],
    "17 ‡∏™.‡∏Ñ. - 16 ‡∏Å.‡∏¢.": ["‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é"],
    "17 ‡∏Å.‡∏¢. - 16 ‡∏ï.‡∏Ñ.": ["‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå"],
    "17 ‡∏ï.‡∏Ñ. - 15 ‡∏û.‡∏¢.": ["‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå"],
    "16 ‡∏û.‡∏¢. - 15 ‡∏ò.‡∏Ñ.": ["‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå"],
    "16 ‡∏ò.‡∏Ñ. - 14 ‡∏°.‡∏Ñ.": ["‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å"]
};
const timeSlots = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 1, 3];

export const calculateZodiac = (birthdate: string, birthtime: string): { birthdate: string; birthtime: string; zodiacSign?: string; error?: string } => {
    console.log("üìå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤‡∏£‡∏≤‡∏®‡∏µ:", birthdate, birthtime);
    
    const date = new Date(birthdate);
    const hour = parseInt(birthtime.split(':')[0]);

    const monthNames = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."];
    let selectedRange = Object.keys(zodiacTable).find(range => {
        const [start, end] = range.split(' - ').map(date => {
            const [d, m] = date.split(' ');
            return { day: parseInt(d), month: monthNames.indexOf(m) + 1 };
        });
        return (date.getMonth() + 1 > start.month || (date.getMonth() + 1 === start.month && date.getDate() >= start.day)) &&
               (date.getMonth() + 1 < end.month || (date.getMonth() + 1 === end.month && date.getDate() <= end.day));
    });

    if (!selectedRange) {
        console.log("‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return { birthdate, birthtime, error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
    }

    let slotIndex = timeSlots.findIndex(slot => hour >= slot && hour < (slot + 2));
    if (slotIndex === -1) slotIndex = timeSlots.length - 1;

    let zodiacSign = zodiacTable[selectedRange][slotIndex];
    console.log(`‚úÖ ‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤‡∏£‡∏≤‡∏®‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: ${zodiacSign} (index: ${slotIndex})`);

    return { birthdate, birthtime, zodiacSign };
};

router.post('/calculate', (req: Request, res: Response) => {
    const { birthdate, birthtime } = req.body;
    if (!birthdate || !birthtime) {
        return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î" });
    }
    const result = calculateZodiac(birthdate, birthtime);
    res.json(result);
});

export default router;