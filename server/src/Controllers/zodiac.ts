const express = require('express');
// const router = express.Router();
import { Request, Response } from 'express';
import { UserHistory } from "../models/userHistory";
import { Zodiac } from '../models/zodiac';
import { Account } from "../models/login"; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏• Account ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

// ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤‡∏£‡∏≤‡∏®‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î (‡πÅ‡∏ö‡πà‡∏á‡∏ä‡πà‡∏ß‡∏á 2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á)
const zodiacTable: Record<string, string[]> = {
    "15 ‡∏°.‡∏Ñ. - 12 ‡∏Å.‡∏û.": ["‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π"],
    "13 ‡∏Å.‡∏û. - 13 ‡∏°‡∏µ.‡∏Ñ.": ["‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£"],
    "14 ‡∏°‡∏µ.‡∏Ñ. - 12 ‡πÄ‡∏°.‡∏¢.": ["‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå"],
    "13 ‡πÄ‡∏°.‡∏¢. - 13 ‡∏û.‡∏Ñ.": ["‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô"],
    "14 ‡∏û.‡∏Ñ. - 14 ‡∏°‡∏¥.‡∏¢.": ["‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©"],
    "15 ‡∏°‡∏¥.‡∏¢. - 16 ‡∏Å.‡∏Ñ.": ["‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†"],
    "17 ‡∏Å.‡∏Ñ. - 16 ‡∏™.‡∏Ñ.": ["‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô"],
    "17 ‡∏™.‡∏Ñ. - 16 ‡∏Å.‡∏¢.": ["‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é"],
    "17 ‡∏Å.‡∏¢. - 16 ‡∏ï.‡∏Ñ.": ["‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå"],
    "17 ‡∏ï.‡∏Ñ. - 15 ‡∏û.‡∏¢.": ["‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå"],
    "16 ‡∏û.‡∏¢. - 15 ‡∏ò.‡∏Ñ.": ["‡∏û‡∏¥‡∏à‡∏¥‡∏Å", "‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå"],
    "16 ‡∏ò.‡∏Ñ. - 14 ‡∏°.‡∏Ñ.": ["‡∏ò‡∏ô‡∏π", "‡∏°‡∏±‡∏á‡∏Å‡∏£", "‡∏Å‡∏∏‡∏°‡∏†‡πå", "‡∏°‡∏µ‡∏ô", "‡πÄ‡∏°‡∏©", "‡∏û‡∏§‡∏©‡∏†", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô", "‡∏Å‡∏£‡∏Å‡∏é", "‡∏™‡∏¥‡∏á‡∏´‡πå", "‡∏Å‡∏±‡∏ô‡∏¢‡πå", "‡∏ï‡∏∏‡∏•‡∏¢‡πå", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å"]
};
const timeSlots = [5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 1, 3];
// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏®‡∏µ‡∏à‡∏≤‡∏Å‡πÑ‡∏ó‡∏¢ -> ‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
const zodiacMapping: Record<string, string> = {
    "‡∏°‡∏±‡∏á‡∏Å‡∏£": "Capricorn", "‡∏Å‡∏∏‡∏°‡∏†‡πå": "Aquarius", "‡∏°‡∏µ‡∏ô": "Pisces",
    "‡πÄ‡∏°‡∏©": "Aries", "‡∏û‡∏§‡∏©‡∏†": "Taurus", "‡πÄ‡∏°‡∏ñ‡∏∏‡∏ô": "Gemini",
    "‡∏Å‡∏£‡∏Å‡∏é": "Cancer", "‡∏™‡∏¥‡∏á‡∏´‡πå": "Leo", "‡∏Å‡∏±‡∏ô‡∏¢‡πå": "Virgo",
    "‡∏ï‡∏∏‡∏•‡∏¢‡πå": "Libra", "‡∏û‡∏¥‡∏à‡∏¥‡∏Å": "Scorpio", "‡∏ò‡∏ô‡∏π": "Sagittarius"
};
export const calculateZodiacAndSave = async (req: Request, res: Response) => {
    try {
        let { userID, birthdate, birthtime } = req.body; // ‚úÖ ‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î + ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

        if (!userID) {
            throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ userID");
                }
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å MongoDB
        const user = await Account.findById(userID).lean();
        if (!user) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
        }

        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ `birthdate` ‡∏´‡∏£‡∏∑‡∏≠ `birthtime` ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å MongoDB
        if (!birthdate) birthdate = user.birthday || null;
        
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ `birthdate` ‡∏´‡∏£‡∏∑‡∏≠ `birthtime` ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å
        if (!birthdate || !birthtime) {
            throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î");
        }

        console.log("üìå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤‡∏£‡∏≤‡∏®‡∏µ:", birthdate, birthtime);

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô `DD/MM/YYYY` ‡∏´‡∏£‡∏∑‡∏≠ `YYYY-MM-DD`
        let dateParts: number[];
        if (birthdate.includes("-")) {
            dateParts = birthdate.split("-").map(Number); // `YYYY-MM-DD` ‚Üí `[YYYY, MM, DD]`
        } else if (birthdate.includes("/")) {
            dateParts = birthdate.split("/").map(Number); // `DD/MM/YYYY` ‚Üí `[DD, MM, YYYY]`
        } else {
            throw new Error("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD ‡∏´‡∏£‡∏∑‡∏≠ DD/MM/YYYY");
        }

        const day: number = birthdate.includes("/") ? dateParts[0] : dateParts[2]; // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å `birthdate`
        const monthIndex: number = birthdate.includes("/") ? dateParts[1] : dateParts[1]; // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (1-12)

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô `hour`
        const hour: number = parseInt(birthtime.split(':')[0], 10);
        
        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
        const monthNames: Record<string, number> = {
            "‡∏°.‡∏Ñ.": 1, "‡∏Å.‡∏û.": 2, "‡∏°‡∏µ.‡∏Ñ.": 3, "‡πÄ‡∏°.‡∏¢.": 4,
            "‡∏û.‡∏Ñ.": 5, "‡∏°‡∏¥.‡∏¢.": 6, "‡∏Å.‡∏Ñ.": 7, "‡∏™.‡∏Ñ.": 8,
            "‡∏Å.‡∏¢.": 9, "‡∏ï.‡∏Ñ.": 10, "‡∏û.‡∏¢.": 11, "‡∏ò.‡∏Ñ.": 12
        };
        // ‚úÖ ‡∏´‡∏≤ `selectedRange`
        let selectedRangeKey = Object.keys(zodiacTable).find(range => {
            const [start, end] = range.split(' - ').map(date => {
                const [d, m] = date.split(' ');
                return { day: parseInt(d, 10), month: monthNames[m] };
            });

            return (
                (monthIndex > start.month || (monthIndex === start.month && day >= start.day)) &&
                (monthIndex < end.month || (monthIndex === end.month && day <= end.day))
            );
        });

        if (!selectedRangeKey) {
            return res.status(400).json({ error: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        let selectedRange = zodiacTable[selectedRangeKey];

        // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏®‡∏µ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        let slotIndex = timeSlots.findIndex(slot => hour >= slot && hour < (slot + 2));
        if (slotIndex === -1) slotIndex = timeSlots.length - 1;

        let thaiZodiac = selectedRange[slotIndex];
        console.log(`‚úÖ ‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤‡∏£‡∏≤‡∏®‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ (‡πÑ‡∏ó‡∏¢): ${thaiZodiac}`);

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏®‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        let englishZodiac = zodiacMapping[thaiZodiac] || thaiZodiac;
        console.log(`‚úÖ ‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤‡∏£‡∏≤‡∏®‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©): ${englishZodiac}`);

        // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏®‡∏µ‡∏à‡∏≤‡∏Å MongoDB
        const zodiacInfo = await Zodiac.findOne({ cardNAME: { $regex: `^${englishZodiac}$`, $options: "i" } }).lean();
        if (!zodiacInfo) {
            return res.status(404).json({ error: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏®‡∏µ‡πÉ‡∏ô MongoDB: ${englishZodiac}` });
        }

        console.log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏®‡∏µ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤:", zodiacInfo);

        // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
        const historyEntry = await UserHistory.create({
            userID,
            type: "zodiac",
            zodiacSign: thaiZodiac,
            birthdate,
            birthtime,
            zodiacImage: zodiacInfo.cardPHOTO,
            zodiacPrediction: zodiacInfo.cardMEANING
        });

        return res.json({
            message: "‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏•‡∏±‡∏Ñ‡∏ô‡∏≤‡∏£‡∏≤‡∏®‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß",
            userID,
            birthdate,
            birthtime,
            zodiacSign: thaiZodiac,
            englishZodiac,
            zodiacImage: zodiacInfo.cardPHOTO,
            zodiacPrediction: zodiacInfo.cardMEANING,
            historyID: historyEntry._id
        });

    } catch (error: any) {
        console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error.message);
        return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};

