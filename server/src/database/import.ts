import fs from 'fs';
import path from 'path';
import csvParser from 'csv-parser';
import { MongoClient } from 'mongodb';

// üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB
const uri: string = 'mongodb://localhost:27017';
const dbName: string = 'cardDB'; // ‚úÖ ‡πÉ‡∏ä‡πâ database ‡πÄ‡∏î‡∏¥‡∏°
const collections = {
    zodiac: 'zodiac_cards', // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å feature1 ‚Üí zodiac
    tarot: 'tarot_cards'     // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å feature2 ‚Üí tarot
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á MongoDB Client
const client = new MongoClient(uri);

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πå‡∏î
interface Card {
    cardID: Number;
    cardNAME: String;
    cardMEANING: String;
    cardPHOTO: String;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ CSV ‡πÄ‡∏Ç‡πâ‡∏≤ MongoDB
async function importCSV(fileName: string, collectionName: string) {
    try {
        await client.connect();
        console.log(`‚úÖ Connected to MongoDB: ${collectionName}`);

        const db = client.db(dbName);
        const collection = db.collection(collectionName);

        // üõë ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
        await collection.deleteMany({});
        console.log(`üóëÔ∏è Cleared old data in ${collectionName}`);

        const filePath = path.join(__dirname, fileName);
        const cards: Card[] = [];

        // ‡∏≠‡πà‡∏≤‡∏ô CSV ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ Header ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
        fs.createReadStream(filePath, { encoding: 'utf-8' })
            .pipe(csvParser({ headers: ['cardID', 'cardNAME', 'cardMEANING', 'cardPHOTO'], skipLines: 1 })) // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ Header
            .on('data', (row: Record<string, string>) => {
                // ‚úÖ ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                Object.keys(row).forEach((key) => {
                    if (row[key]) row[key] = row[key].trim();
                });

                // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ field ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
                if (!row.cardID || !row.cardNAME || !row.cardMEANING || !row.cardPHOTO) {
                    console.log(`‚ö†Ô∏è Skipping row (Missing required fields):`, row);
                    return;
                }

                // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `cardID` ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
                const parsedCardID = parseInt(row.cardID, 10);
                if (isNaN(parsedCardID)) {
                    console.log(`‚ùå Invalid cardID (NaN):`, row.cardID);
                    return;
                }

                // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö `\n` ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô `cardMEANING` ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç `""` ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
                const cleanedMeaning = row.cardMEANING
                    .replace(/\\n/g, '\n') // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
                    .replace(/""/g, '"');  // ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ "" ‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏ô CSV

                // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô MongoDB
                cards.push({
                    cardID: parsedCardID,
                    cardNAME: row.cardNAME,
                    cardMEANING: cleanedMeaning, // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà
                    cardPHOTO: row.cardPHOTO
                });
            })
            .on('end', async () => {
                if (cards.length > 0) {
                    await collection.insertMany(cards);
                    console.log(`‚úÖ Imported ${cards.length} records into ${collectionName}`);
                } else {
                    console.log(`‚ö†Ô∏è No valid data found in ${fileName}`);
                }
                if (collectionName === collections.tarot) client.close();
            });

    } catch (err) {
        console.error(`‚ùå Error importing ${fileName}:`, err);
        client.close();
    }
}

// **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
importCSV('zodiac.csv', collections.zodiac);
importCSV('tarot.csv', collections.tarot);
